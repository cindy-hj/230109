/* 
1. 초기화 -> 여백값 설정
2. 각 영역 구분 설정 -> 주석 달기
3. 클래스 지정 영역 확인 -> header 영역 위로 클래스 내용 지정
4. 파트별 스타일 작성
5. 가로 100% 영역
6. 컨텐츠 가로 영역 1920px
*/
/* 
선택자
-tag -> 태그명(정해진 값이므로 변경할 수 없음) -> li 태그 선택시 li만 써야함
-class -> .클래스명
-id -> #아이디명
-> 클래스명, 아이디명 : 위치, 역할, 기능에 맞추어 지정
-> 첫번째 글자는 영어사용(빈 공백, 특수문자, 숫자 사용 안됨)
-> 전체 이름 설정시에 빈공백 인식 안함, 특수문자 -, _
-> 숫자 사용 가능
*/
/* 세미콜론을 넣으면 안된다!! */
/* 전체 */
*{
    margin: 0;
    padding: 0;
}
ol, ul, li {
    list-style: none;
}
/* 태그 그룹이 class보다 더 크다.. class로 잡은걸 id로 수정하면 우선순위상 id로 잡은걸로 수정한다. */
.width_box {
    width: 1920px;
    background-color: gray;
    /* 객체 사이의 여백, 가로크기 설정 후 margin 0 auto는 가로 중앙정렬 규칙*/
    margin: 0 auto; 
    display: inline-block;
}
.con_title {
    /* width: 300px; */
    height: 100px;
    background-color: rgb(255, 235, 235);
    /* margin: 0 auto; */
    text-align: center;
    /* 텍스트 세로 정렬 */
    line-height: 100px;
    /* 줄간격
    => 텍스트를 둘러 싸고 있는 박스의 높이값으로 지정
    => 세로 중앙 */
}

/* header 영역 */
#main_header{
    width: 100%;
    /* 자식인 serach_wrap의 위치 기준 */
    position: relative;
    height: 600px;
    background-color: rgb(245, 255, 207);
}
#main_top_nav_wrap {
    height: 200px;
}
#top_nav {
    height: 50px;
    border-bottom: 2px solid black;
}
#login_wrap {
    width: 350px;
    height: 100%;
    background-color: yellow;
    float: right;
}
/* 부모>자식, 부모안에 있는 자식을 선택할때 사용
부모>자식>손자
부모 손자=> 부모안에 있는 손자를 선택(자식도 선택가능)
우선순위 높은건 > 들어간것
위에서 쓴 li보다 우선순위 높다, 영역이 작은것이 우선순위가 높음 */
#login_wrap>li {
    /* float가 가장 기본적인 가로정렬 형태, 그 다음이 반응형 작업을 위해 나온 flex */
    float: left;
}
#bottom_nav {
    /* top_nav를 52px로 계산 */
    height: 148px;
    /* inline은 초기값에서 내가 모르는 여백이 들어감 그래서 잘 안쓴다!, 가로 정렬시 가장 많이 쓰는게 float, 그리고 쓰는게 flex */
}
#logo_wrap {
    width: 300px;
    float: left;
    background-color: aliceblue;
}
#logo_wrap li {
    float: left;
}
#main_wrap {
    width: 700px;
    float: left; 
    margin-left: 30px;
    background-color: antiquewhite;
}
#main_wrap li {
    float: left;
}

/* 
- 가로크기 정렬
- 부모안에서 오른쪽 정렬
- 자식 => 가로정렬
*/
#right_menu_wrap {
    width: 500px;
    float:  right; 
    background-color: azure;
}
#right_menu_wrap li{
    float: left;
}
#search_wrap {
    width: 1200px;
    height: 300px;
    position: absolute;
    background: yellowgreen;
    left: 50%;
    margin-left: -600px;
    /* bottom쪽으로 떨어지는거라 -값 */
    bottom: -150px;
}

/* section 영역 */
/* section1 영역 */
.sec_con_title {
    /* 텍스트는 가로의 크기를 부모에 맞추는게 편하다 */
    font-size: 30px;
    font-weight: 900;
    
    /* 텍스트 관련 스타일 */

    /* 텍스트 크기값
    font-size: ;
    px, %, em 단위 활용 */
    
    /* 텍스트 굵기
    font-weight: ;
    100(가장 가늘게)~900(가장 굵게) */

    /* 텍스트 색상
    color: #ff0000;
    R G B => 빛의 3요소
    2자리씩 끊어서 6자리, 16진수 표현 */

    /* 폰트
    font-family: 'Courier New', Courier, monospace; */

    /* 텍스트 정렬
    text-align: ;
    left(기본값), center, right */

    /* font-style: italic;
    => 기울기체 */

    /* text-decoration: ;
    밑줄 */
}
#section_1 {
    height: 800px;
    background: rgb(255, 242, 224);
    float: left;
    width: 100%;
}

#buy_wrap {
    width: 1200px;
    height: 550px;
    margin: 0 auto;
    /* 부모 안에서 자식에게 위아래 여백 지정시 
    1. 부모의 상대값 속성, 절대값 속성에 따라 자식의 margin값이 부모에게 지정됨
    => 해결법
    1. 부모에게 절대값, float값 지정
    2. 자식에게 절대값, float값 지정 */
    margin-top: 200px;
    background: rgb(210, 210, 255);
}
/* 선택자, 선택자 로 추가 선택자 넣을 수 있다 */
#buy_left, #buy_right {
    width: 580px;
    height: 550px;
    background: gainsboro;
}
/* => 아이디 추가 선택을 한 후 클래스로 동일 스타일 변경 안됨
=> 아이디로 선택 동일 스타일 변경가능 but 변경, 추가되는 스타일 영역은 기존 위치보다 아래에 지정해야함 */
#buy_left {
    float: left;
}
#buy_right {
    float: right;
}
.sec_con_title {
    width: 100%;
    /* height: 500px; */
    background: rgb(193, 131, 255);
}

section{
    width: 100%;
    overflow: hidden;
    border-bottom: 2px solid black;
}
/* 세로 크기 설정
1. height 값으로 지정
2. 자식영역 세로 크기값에 부모의 높이값을 맞춤
overflow
=>부모에 높이값 없음
=>자식 높이값 설정
=>hiddden 값은 자식 높이에 자동 맞춤 설정 

마스크효과
부모에 높이값 설정
oveflow:hidden
부모 영역보다 넘치는 자식의 크기는 잘림

*/
section>article {
    width: 1200px;
    height: 550px;
    background: beige;
    margin: 30px auto;
    

}



/* footer 영역 */

